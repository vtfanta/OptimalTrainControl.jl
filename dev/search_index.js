var documenterSearchIndex = {"docs":
[{"location":"tutorials/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"This page shows how to use the package. ","category":"page"},{"location":"tutorials/#Track-creation","page":"Tutorial","title":"Track creation","text":"","category":"section"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"A flat track instance can be created very simply since it is defined only by its length. A flat track of a length 10 mathrmkm can be created with","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"using OptimalTrainControl\nflattrack = FlatTrack(10e3)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"A general track with a nontrivial terrain is defined with the use of two vectors which represent the distances and height values at the corresponding distance (in metres):","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"using OptimalTrainControl, Plots\ntrackX = [0, 2, 3, 5, 7]\ntrackY = [0, 0.2, -0.1, -0.1, 0.1]\ntrack = HillyTrack(trackX, trackY)\nplot(track)","category":"page"},{"location":"tutorials/#Flat-track","page":"Tutorial","title":"Flat track","text":"","category":"section"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"using OptimalTrainControl, Plots\nflattrack = FlatTrack(10e3)\nprob = TrainProblem(; track = flattrack, T = 1000)\npoints, sol = solve!(prob)\nplot(sol.t, sol[2,:]; color = modecolor(sol.t, points), lw = 2, label = false)","category":"page"},{"location":"tutorials/#General-track","page":"Tutorial","title":"General track","text":"","category":"section"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"using OptimalTrainControl, Plots\n\n# From https://doi.org/10.1109/9.867018\ntrackX = [0,16e3,20e3,24e3,25e3,28e3,31e3,40e3]\ntrackY = [0,0,400,160,160,460,280,280]/9.81\ntrack = HillyTrack(trackX, trackY)\nresistance = DavisResistance(1.5e-2, 0.127e-2/sqrt(2), 0.016e-2/2)\n\nT = 3600.0\nu_max(v) = 0.125\nu_min(v) = -0.25\nvᵢ = 2.0\nvf = 2.0\n\nprob = TrainProblem(;track, resistance, T, \n    umax = u_max, umin = u_min, vᵢ, vf)\n\npoints, sol = solve!(prob)\n\nplot(sol.t, sol[2,:]; color = modecolor(sol.t, points), lw = 2, label = false)","category":"page"},{"location":"problem/#Problem-Statement","page":"Problem Statement","title":"Problem Statement","text":"","category":"section"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"The optimal train control problem which is solved by this package is mathematically formulated as","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"mathrmmin J=mathrmmin intlimits_0^X left( fracu+u2 + rhofracu-u2 right)mathrmdx","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"subject to the constraints","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"begingather*\nt = frac1vquad v = fracu-r(v)+g(x)v\nt(0) = 0quad t(X) = T\nv(0) = v_iquad v(X) = v_f\nU_+(v) leq u leq U_-(v)\nendgather*","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"In other words, calculate control signal u subject to the dynamical system (the constraints on the first line above) and the boundary constraints given by initial speed v_i, final speed v_f and total journey time T such that the criterion J is minimised. The control signal u is constrained itself by the train traction characteristics U_+(v) leq u leq U_-(v). ","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"The resistance function r(v) which combines the influences of mechanic and aerodynamic resistances is modeled as r(v) = A + Bv + Cv^2 with ABCgeq0. The speed parameters v_i and v_f have to be strictly positive (it is highly recommended to use values vgeq1) since the state equations contain singularity at v=0. The control limits have to be monotone (U_+ non-increasing, U_- non-decreasing) with","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"lim_vtoinftyU_-(v)=lim_vtoinftyU_+(v) = 0","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"It can be shown that the optimal control is a switching control between a small number of modes: Maximum acceleration, holding constant speed, coasting (no braking and no traction) and maximum braking.","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"The output of the implemented solution are the trajectories of t, v and u as well as the location of switching points between the control modes.","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [OptimalTrainControl]","category":"page"},{"location":"reference/#OptimalTrainControl.DavisResistance","page":"Reference","title":"OptimalTrainControl.DavisResistance","text":"Empirical formula originally calculated for freight cars. The resistance (in N/kg) is given by     R = a + b * v + c * v^2, where v is the vehicle speed.\n\n\n\n\n\n","category":"type"},{"location":"reference/#OptimalTrainControl.finish-Tuple{FlatTrack}","page":"Reference","title":"OptimalTrainControl.finish","text":"finish(t::FlatTrack)\n\nReturn length of the flat track in metres.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.finish-Tuple{HillyTrack}","page":"Reference","title":"OptimalTrainControl.finish","text":"finish(t::HillyTrack)\n\nReturn length of the track in metres.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.getgrade-Tuple{HillyTrack, Any}","page":"Reference","title":"OptimalTrainControl.getgrade","text":"getgrade(track::HillyTrack, pos)\n\nGet the track grade (in radians) of the track at the given position pos.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.getgrade-Tuple{Track, Any}","page":"Reference","title":"OptimalTrainControl.getgrade","text":"Get the grade (in radians) of a flat track at the given position.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.getgradientacceleration-Tuple{Scenario, Any}","page":"Reference","title":"OptimalTrainControl.getgradientacceleration","text":"getgradientacceleration(::Scenario, position)\n\nReturn accelerating/decelerating component of the gravitational acceleration  in meters per second squared [m s^-2] based on the gravitational acceleration value defined in the scenario.  Positive means downhill, negative means uphill.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.getgradientacceleration-Tuple{Track, Any}","page":"Reference","title":"OptimalTrainControl.getgradientacceleration","text":"getgradientacceleration(::Track, position)\n\nReturn acceleration/decelerating component of the gravitational acceleration g = 9.81 m / s^2. Positive means downhill, negative means uphill.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.inclinationforce-Tuple{Scenario, Any}","page":"Reference","title":"OptimalTrainControl.inclinationforce","text":"Calculate the acting force component based on the current track grade. The returned value is in N/kg, i.e. force per unit mass.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.resistance-Tuple{DavisResistance, Any}","page":"Reference","title":"OptimalTrainControl.resistance","text":"Calculate the Davis formula resistant force per unit mass.\n\nR = a + b * v + c * v^2,\n\nwhere v is the vehicle speed and a, b and c are the resistance parameters.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.start-Tuple{FlatTrack}","page":"Reference","title":"OptimalTrainControl.start","text":"start(t::FlatTrack)\n\nReturn 0.0 m as the beginning of the flat track.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.start-Tuple{HillyTrack}","page":"Reference","title":"OptimalTrainControl.start","text":"start(t::HillyTrack)\n\nReturn start of the track in metres.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = OptimalTrainControl","category":"page"},{"location":"","page":"Home","title":"Home","text":"<p style=\"text-align:center\">\n\n<img src=\"./assets/logo.svg\" alt=\"OptimalTrainControl logo\">\n\n<br> \n\n<a class=\"github-button\" href=\"https://github.com/vtfanta/OptimalTrainControl.jl\" data-color-scheme=\"no-preference: light; light: light; dark: dark;\" data-icon=\"octicon-star\" data-show-count=\"true\" aria-label=\"Star vtfanta/OptimalTrainControl.jl on GitHub\">Star</a>\n\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n</p> ","category":"page"},{"location":"#OptimalTrainControl.jl-Manual","page":"Home","title":"OptimalTrainControl.jl Manual","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OptimalTrainControl.jl is a package for optimal speed profile calculation for a single train on a given track.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This site serves as the main source of documentation for the package.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Because the package is not registered in its current state, the installation command has the form:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg; Pkg.add(\"https://github.com/vtfanta/OptimalTrainControl.jl\")","category":"page"}]
}
