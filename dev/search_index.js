var documenterSearchIndex = {"docs":
[{"location":"problem/#Problem-Statement","page":"Problem Statement","title":"Problem Statement","text":"","category":"section"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"The optimal train control problem which is solved by this package is mathematically formulated as","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"mathrmmin J=mathrmmin intlimits_0^X left( fracu+u2 + rhofracu-u2 right)mathrmdx","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"subject to the constraints","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"begingather*\nt = frac1vquad v = fracu-r(v)+g(x)v\nt(0) = 0quad t(X) = T\nv(0) = v_iquad v(X) = v_f\noverlineU(v) leq u leq underbarU(v)\nendgather*","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"In other words, calculate control signal u subject to the dynamical system (the constraints on the first line above) and the boundary constraints given by initial speed v_i, final speed v_f and total journey time T such that the criterion J is minimised. The control signal u is constrained itself by the train traction characteristics overlineU(v) leq u leq underbarU(v). ","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"The resistance function r(v) which combines the influences of mechanic and aerodynamic resistances is modeled as r(v) = A + Bv + Cv^2 with ABCgeq0. The speed parameters v_i and v_f have to be strictly positive (it is highly recommended to use values vgeq1) since the state equations contain singularity at v=0. The control limits have to be monotone (overlineU non-increasing, underbarU non-decreasing) with","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"lim_vtoinftyunderbarU(v)=lim_vtoinftyoverlineU(v) = 0","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"It can be shown that the optimal control is a switching control between a small number of modes: Maximum acceleration, holding constant speed, coasting (no braking and no traction) and maximum braking.","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"The output of the implemented solution are the trajectories of t, v and u as well as the location of switching points between the control modes.","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [OptimalTrainControl]","category":"page"},{"location":"reference/#OptimalTrainControl.EETCProblem","page":"Reference","title":"OptimalTrainControl.EETCProblem","text":"prob = EETCProblem(; T, train, track, <keyword arguments>)\n\nFormulate an energy-efficient train control problem.\n\nArguments\n\nT::Real: total time of the trip.\ntrain::Train: train specification for the problem.\ntrack::Track: track specification for the problem.\ncurrent_phase::Mode = MaxP: (mainly for internal purposes) starting control mode.\ninitial_speed::Real = 1.: starting speed; 1 m/s is regarded as a stop.\nEs::Vector{Real} = []: (internal) vector of shifting constants used for calculation of the adjoint variable trajectory.\n\n\n\n\n\n","category":"type"},{"location":"reference/#OptimalTrainControl.Mode","page":"Reference","title":"OptimalTrainControl.Mode","text":"An Enum useful for specifying the five possible control modes:\n\nMaxP: Maximum power; usually takes place at the start.\nHoldP: Cruising; holding constant speed with positive input.\nHoldR: Regenerative braking; holding constant speed with negative input, can only take place on steep downhill segments.\nCoast: Coasting; neither applying power or braking.\nMaxB: Maximum braking; usually takes place at the end.\n\n\n\n\n\n","category":"type"},{"location":"reference/#OptimalTrainControl.OTCSolution","page":"Reference","title":"OptimalTrainControl.OTCSolution","text":"sol1::OTCSolution = solve(p1::TOTCProblem)\nsol2::OTCSolution = solve(p2::EETCProblem)\n\nIs returned as a result of solving a TOTCProblem or a EETCProblem.\n\nFields\n\nodesol::SciMLBase.ODESolution: solution of the differential equation coming from DifferentialEquations.jl package. The states are [time, speed] and are accessed with e.g. sol1.u. The distances along the track are accessed via e.g. sol1.t. The interpolation functionality should behave as expected although this is not guaranteed since the problem has multiple phases.\nx_phases::Vector{Real}: sequence of positions at which control modes (see Mode) changes.\nphases::Vector{Mode}: sequence of control modes (see Mode).\ncontrol::Function: optimal control as a function of distance along the track.\nη::Vector{Real}: trajectory of the adjoint variable determining the current control mode (see Mode).\n\nSee also TOTCProblem, EETCProblem, Mode.\n\n\n\n\n\n","category":"type"},{"location":"reference/#OptimalTrainControl.TOTCProblem","page":"Reference","title":"OptimalTrainControl.TOTCProblem","text":"prob = TOTCProblem(;train::Train, track::Track, <keyword arguments>)\n\nFormulate a time-optimal train control problem to be solved.\n\nArguments\n\ntrain::Train: vehicle specification for the problem.\ntrack::Track: track specification for the problem\ncurrent_phase::Mode = MaxP: (mainly for internal purposes) starting control mode.\ninitial_speed::Real = 1.: starting speed; 1 mathrmms  is regarded as a stop.\n\n\n\n\n\n","category":"type"},{"location":"reference/#OptimalTrainControl.Track","page":"Reference","title":"OptimalTrainControl.Track","text":"track = Track(;length <keyword arguments>)\n\nDefines a track to be used in TOTCProblem or EETCProblem construction\n\nArguments\n\naltitude::Real: altitude of the start of the track.\nx_gradient::Vector{Real}: vector of positions at which the gradient changes.\ngradient::Vector{Real}: vector of grade values in rise/run, positive means uphill.\nx_speedlimit::Vector{Real}: vector of positions at which the speed limit changes.\nspeedlimit::Vector{Real}: vector of speed limit values in mathrmms.\n\nExamples\n\n# Flat track\nflat_track = Track(length = 1e3)\n\n# Hilly track\nhilly_track = Track(\n    length = 3e3,\n    altitude = 100.,\n    x_gradient = [0.0, 1e3, 1.7e3],\n    gradient = [2e-3, 0., 1e-3]\n)\n\nSee also TOTCProblem, EETCProblem.\n\n\n\n\n\n","category":"type"},{"location":"reference/#OptimalTrainControl.Train","page":"Reference","title":"OptimalTrainControl.Train","text":"train = Train(U̅, U̲, r, ρ = 0)\n\nDefines a train to be used in TOTCProblem or EETCProblem construction\n\nArguments\n\nU̅::Function: maximum traction specific force (per unit mass, i.e. acceleration) as a function of speed.\nU̲::Function: minimum traction specific force (braking, per unit mass, i.e. acceleration) as a function of speed.\nr::Tuple: triplet of coefficients defining resistance of the train as a quadratic function of the speed resistance(v) = r[1] + r[2]v + r[3]v^2.\nρ::Real = 0: regeneration coefficient ρ  01 specifying proportion of braking speed recovered (0 means no regeneration, 1 means all braking energy regenerated).\n\nExample\n\ntrain = Train(\n    U̅ = v ->  1/v,\n    U̲ = v -> -1/v,\n    r = (1e-2, 0., 1.5e-5),\n    ρ = 0.3\n)\n\nSee also TOTCProblem, EETCProblem.\n\n\n\n\n\n","category":"type"},{"location":"reference/#OptimalTrainControl.altitude-Union{Tuple{T}, Tuple{Track, T}} where T<:Real","page":"Reference","title":"OptimalTrainControl.altitude","text":"altitude(track::Track, position::Real)\n\nReturn altitude (in metres) at position on track.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.g-Union{Tuple{T}, Tuple{Track, T}} where T<:Real","page":"Reference","title":"OptimalTrainControl.g","text":"g(track::Track, position::Real)\n\nReturn gravitational acceleration component at position regarding the gradient of track.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.gradient-Union{Tuple{T}, Tuple{Track, T}} where T<:Real","page":"Reference","title":"OptimalTrainControl.gradient","text":"gradient(track::Track, position::Real)\n\nReturn gradient (in rise over run) at position on track. For example, a gradient of a segment which rises 10 metres over 100 metres of distance has gradient of 0.1.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.isvalidposition-Union{Tuple{T}, Tuple{Track, T}} where T<:Real","page":"Reference","title":"OptimalTrainControl.isvalidposition","text":"isvalidposition(track::Track, position::Real)\n\nCheck if position is not out of bounds of the track.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.r-Union{Tuple{T}, Tuple{Train, T}} where T<:Real","page":"Reference","title":"OptimalTrainControl.r","text":"r(train::Train, speed:Real)\n\nReturn resistance specific force of train at given speed.\n\nThe resistance specific force (per unit mass, i.e. acceleration) is positive and calculated as train.r[1] + train.r[2] * v + train.r[3] * v^2.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.segmentize!-Tuple{Track}","page":"Reference","title":"OptimalTrainControl.segmentize!","text":"segmentize!(track::Track)\n\nModify track.x_segments such that its elements mark starts of track parts on which both gradient and speed limit are constant.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.solve-Tuple{TOTCProblem}","page":"Reference","title":"OptimalTrainControl.solve","text":"solve(problem::TOTCProblem)\n\nCompute OTCSolution of the time-optimal train control problem.\n\nSee also TOTCProblem, OTCSolution.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.solve-Union{Tuple{EETCProblem{TV, S, U, Nothing, Nothing, VS}}, Tuple{VS}, Tuple{U}, Tuple{S}, Tuple{TV}} where {TV, S, U, VS}","page":"Reference","title":"OptimalTrainControl.solve","text":"solve(problem::EETCProblem)\n\nCompute OTCSolution of an energy-efficient train control problem on a flat track.\n\nSee also EETCProblem, OTCSolution.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.speedlimit-Union{Tuple{T}, Tuple{Track, T}} where T<:Real","page":"Reference","title":"OptimalTrainControl.speedlimit","text":"speedlimit(track::Track, position::Real)\n\nReturn speedlimit (in metres per second) at position on track.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = OptimalTrainControl","category":"page"},{"location":"#OptimalTrainControl.jl-Manual","page":"Home","title":"OptimalTrainControl.jl Manual","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OptimalTrainControl is a package for optimal speed profile calculation for a single train on a given track.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This site serves as the main source of documentation for the package.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package can be installed by entering","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg; Pkg.add(url=\"https://github.com/vtfanta/OptimalTrainControl_v2.jl\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"to the Julia REPL.","category":"page"},{"location":"tutorial/#Time-Optimal-Train-Control-(TOTC)-Example","page":"Tutorial","title":"Time-Optimal Train Control (TOTC) Example","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Consider the problem of finding the time-optimal speed profile on a flat track of length 3 mathrmkm. At first we need to define a Train and a Track which will form the basis of our problem.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Each Train has upper and lower limit of its traction capabilites (specified as a Julia function of speed) and coefficients of a quadratic representing the speed-dependent train's mechanical and aerodynamical resistance.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"train = Train(\n    v ->  3/v,\n    v -> -3/v,\n    (6.75e-3, 0., 5e-5)\n)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The only required argument for a Track is its length, however one can also specify its altitude and points of changing track grade.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"track = Track(\n    length = 3e3,\n    altitude = 100.,\n    x_gradient = [0.0, 1e3, 1.7e3],\n    gradient = [2e-3, 0., 1e-3]\n)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We are now ready to construct a time-optimal train control problem and solve it!","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"prob = TOTCProblem(train, track)\nsol = solve(prob)\nplot(sol)\nplot!(twinx(), track)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"(Image: TOTC Solution)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The colours are showing the control mode which is currently engaged (green for maximum traction, red for maximum braking).","category":"page"},{"location":"tutorial/#Energy-efficient-Train-Control-Problem-Example","page":"Tutorial","title":"Energy-efficient Train Control Problem Example","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"In contrast to the previous example, energy-efficient  train control (EETC) problems minimize the criterion","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"mathrmmin J=mathrmmin intlimits_0^X left( fracu+u2 + rhofracu-u2 right)mathrmdx","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"where x is the distance along the track, u is traction effort of the train and rhoin01 is the proportion of mechanical energy recovered during braking. The problem is to minimize the functional J while also satisfying the requirement of the total journey time.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Let's construct a 5 mathrmkm flat track,","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"track = Track(\n    length = 5e3\n)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"and a train (the fourth argument is rho):","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"train = Train(\n    v -> 1/v,\n    v -> -1/v,\n    (1e-2, 0., 1.5e-5),\n    0.6\n)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Suppose, we want to arrive at our destination after T=800 mathrms and so we plug this requirement into our definition of an EETC problem:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"T = 800.\nprob = EETCProblem(T, train, track)\nsol = solve(prob)\nplot(sol)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"(Image: EETC Solution)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The colours specify the currently engaged control mode (green for maximum traction, blue for cruising, gray for coasting and red for maximum braking).","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"One can also inspect the optimal control signal throughout the trip:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"plot(sol.control, 0, track.length)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"(Image: Optimal control)","category":"page"}]
}
