var documenterSearchIndex = {"docs":
[{"location":"tutorials/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"This page shows how to use the OptimalTrainControl.jl. ","category":"page"},{"location":"tutorials/#Track-creation","page":"Tutorial","title":"Track creation","text":"","category":"section"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"A flat track instance can be created very simply since it is defined only by its length. A flat track of a length 10 mathrmkm can be created with","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"using OptimalTrainControl\nflattrack = FlatTrack(10e3)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"A general track with a nontrivial terrain is defined with the use of two vectors which represent the distances and height values at the corresponding distance (in metres):","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"using OptimalTrainControl, Plots\ntrackX = [0, 2, 3, 5, 7]\ntrackY = [0, 0.2, -0.1, -0.1, 0.1]\ntrack = HillyTrack(trackX, trackY)\nplot(track)","category":"page"},{"location":"tutorials/#Flat-track","page":"Tutorial","title":"Flat track","text":"","category":"section"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Consider now the problem of finding the optimal speed profile on a flat track defined above. The total journey time is 1000 mathrms and the other parameters are set to their default values. The default values are vᵢ = 1.0, vf = 1.0, umax = v -> 3 / max(5, v), umin = v -> -3 / max(5, v), ρ = 0, r(v)=001 + 15cdot 10^-5v^2. The parameter values are passed as keyword arguments to the TrainProblem struct:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"prob = TrainProblem(; track = flattrack, T = 1000)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"We can now solve the problem and plot the results:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"using OptimalTrainControl, Plots # hide\nflattrack = FlatTrack(10e3) # hide\nprob = TrainProblem(; track = flattrack, T = 1000) # hide\npoints, sol = solve!(prob)\nplot(sol.t, sol[2,:]; color = modecolor(sol.t, points), lw = 2, label = false,\n    xlabel = \"Distance (m)\", ylabel = \"Speed (m/s)\") ","category":"page"},{"location":"tutorials/#General-track","page":"Tutorial","title":"General track","text":"","category":"section"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"The previous example involved a flat track. However, the Earth, as some of us still believe, is not as flat as it would seem. The following example shows calculation of optimal speed profile for the case of a track containing steep sections.","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"The track gradient profile is taken from this article written by Eugene Khmelnitsky. Let's visualise it:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"using OptimalTrainControl, Plots # hide\ntrackX = [0,16e3,20e3,24e3,25e3,28e3,31e3,40e3]\ntrackY = [0,0,400,160,160,460,280,280]/9.81\ntrack = HillyTrack(trackX, trackY)\nplot(track)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"The steep sections in the middle of the track are what makes this track a bit trickier to plan around. The problem data are ","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"U_+(v) = 0125quad U_-(v) = -025\nr(v) = 15cdot10^-2 + frac0127cdot10^-2sqrt2v+frac0016cdot10^-22v^2\nv_i = v_f = 2\nT = 3600","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Putting it all together:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"using OptimalTrainControl, Plots # hide\ntrackX = [0,16e3,20e3,24e3,25e3,28e3,31e3,40e3] # hide\ntrackY = [0,0,400,160,160,460,280,280]/9.81 # hide\ntrack = HillyTrack(trackX, trackY) # hide\nresistance = DavisResistance(1.5e-2, 0.127e-2/sqrt(2), 0.016e-2/2)\nT = 3600.0\nu_max(v) = 0.125\nu_min(v) = -0.25\nvᵢ = 2.0\nvf = 2.0\n\nprob = TrainProblem(;track, resistance, T, \n    umax = u_max, umin = u_min, vᵢ, vf)\n\npoints, sol = solve!(prob)\n\nplot(sol.t, sol[2,:]; color = modecolor(sol.t, points), lw = 2, label = false,\n    xlabel = \"Distance (m)\", ylabel = \"Speed (m/s)\")\nplot!(twinx(), track; xlabel = \"\")","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Apart from the sol structure (which is taken directly from the output of DifferentialEquaionts.jl) the points list contains the switching locations between individual control modes. The nomenclature is taken from this comprehensive summary by A. Albrecht et al. The used control mode abbreviations are: MaxP for maximum acceleration, MaxB for maximum braking, HoldP for holding constant speed using positive control, HoldR for holding constant speed using negative control, Coast for coasting (no braking or accelerating).","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"using OptimalTrainControl, Plots # hide\ntrackX = [0,16e3,20e3,24e3,25e3,28e3,31e3,40e3] # hide\ntrackY = [0,0,400,160,160,460,280,280]/9.81 # hide\ntrack = HillyTrack(trackX, trackY) # hide\nresistance = DavisResistance(1.5e-2, 0.127e-2/sqrt(2), 0.016e-2/2) # hide\nT = 3600.0 # hide\nu_max(v) = 0.125 # hide\nu_min(v) = -0.25 # hide\nvᵢ = 2.0 # hide\nvf = 2.0 # hide\nprob = TrainProblem(;track, resistance, T, umax = u_max, umin = u_min, vᵢ, vf) # hide\npoints, sol = solve!(prob) # hide\npoints","category":"page"},{"location":"tutorials/#Recalculation","page":"Tutorial","title":"Recalculation","text":"","category":"section"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Suppose that circumstances have caused the train to deviate from the precomputed optimal speed profile. The optimisation can be also performed on a subtrack of the original one with different boundary conditions:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"using OptimalTrainControl, Plots # hide\ntrackX = [0,16e3,20e3,24e3,25e3,28e3,31e3,40e3] # hide\ntrackY = [0,0,400,160,160,460,280,280]/9.81 # hide\ntrack = HillyTrack(trackX, trackY) # hide\nresistance = DavisResistance(1.5e-2, 0.127e-2/sqrt(2), 0.016e-2/2) # hide\nT = 2600.0\nu_max(v) = 0.125 # hide\nu_min(v) = -0.25 # hide\nvᵢ = 12.0\nvf = 2.0\nprob = TrainProblem(;track = subtrack(track, 11e3), resistance, T, umax = u_max, umin = u_min, vᵢ, vf)\n\npoints, sol = solve!(prob)\n\nplot(sol.t, sol[2,:]; color = modecolor(sol.t, points), lw = 2, label = false,\n    xlabel = \"Distance (m)\", ylabel = \"Speed (m/s)\")\nplot!(twinx(), subtrack(track, 11e3); xlabel = \"\")","category":"page"},{"location":"problem/#Problem-Statement","page":"Problem Statement","title":"Problem Statement","text":"","category":"section"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"The optimal train control problem which is solved by this package is mathematically formulated as","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"mathrmmin J=mathrmmin intlimits_0^X left( fracu+u2 + rhofracu-u2 right)mathrmdx","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"subject to the constraints","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"begingather*\nt = frac1vquad v = fracu-r(v)+g(x)v\nt(0) = 0quad t(X) = T\nv(0) = v_iquad v(X) = v_f\nU_+(v) leq u leq U_-(v)\nendgather*","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"In other words, calculate control signal u subject to the dynamical system (the constraints on the first line above) and the boundary constraints given by initial speed v_i, final speed v_f and total journey time T such that the criterion J is minimised. The control signal u is constrained itself by the train traction characteristics U_+(v) leq u leq U_-(v). ","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"The resistance function r(v) which combines the influences of mechanic and aerodynamic resistances is modeled as r(v) = A + Bv + Cv^2 with ABCgeq0. The speed parameters v_i and v_f have to be strictly positive (it is highly recommended to use values vgeq1) since the state equations contain singularity at v=0. The control limits have to be monotone (U_+ non-increasing, U_- non-decreasing) with","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"lim_vtoinftyU_-(v)=lim_vtoinftyU_+(v) = 0","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"It can be shown that the optimal control is a switching control between a small number of modes: Maximum acceleration, holding constant speed, coasting (no braking and no traction) and maximum braking.","category":"page"},{"location":"problem/","page":"Problem Statement","title":"Problem Statement","text":"The output of the implemented solution are the trajectories of t, v and u as well as the location of switching points between the control modes.","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [OptimalTrainControl]","category":"page"},{"location":"reference/#OptimalTrainControl.DavisResistance","page":"Reference","title":"OptimalTrainControl.DavisResistance","text":"Empirical formula originally calculated for freight cars. The resistance (in N/kg) is given by     R = a + b * v + c * v^2, where v is the vehicle speed.\n\n\n\n\n\n","category":"type"},{"location":"reference/#OptimalTrainControl.FlatTrack","page":"Reference","title":"OptimalTrainControl.FlatTrack","text":"FlatTrack(X::Real)\n\nCreate instance of a flat track of length X.\n\n\n\n\n\n","category":"type"},{"location":"reference/#OptimalTrainControl.FlatTrack-Tuple{Any}","page":"Reference","title":"OptimalTrainControl.FlatTrack","text":"my_flattrack(x)\n\nReturn 0 height value at the distance x.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.HillyTrack-Tuple{AbstractVector, AbstractVector}","page":"Reference","title":"OptimalTrainControl.HillyTrack","text":"HillyTrack(Xs, Ys)\n\nCreate instance of a track. The track is defined by a set of waypoints along distance Xs and heights Ys at the appropriate x-points.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.HillyTrack-Tuple{Any}","page":"Reference","title":"OptimalTrainControl.HillyTrack","text":"my_track(x)\n\nReturn height value at the distance x.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.Segment","page":"Reference","title":"OptimalTrainControl.Segment","text":"Segment(start, finish, mode, holdspeed)\n\nDefine segment of a track between start and finish where mode is possible with holding speed holdspeed.\n\n\n\n\n\n","category":"type"},{"location":"reference/#OptimalTrainControl.TrainProblem","page":"Reference","title":"OptimalTrainControl.TrainProblem","text":"TrainProblem(; track::Track, T, umax = v -> 3 / max(5, v), umin = v -> -3 / max(5, v),\n    resistance = DavisResistance(1e-2, 0, 1.5e-5), ρ = 0, vᵢ = 1.0, vf = 1.0)\n\nDefine the optimal train control problem via specifying all of the relevant parameters as keyword arguments. All of the arguments have default values except track and total journey time T.\n\nArguments\n\ntrack::Track: Track specification\nT: Total time of journey in seconds\numax = v -> 3 / max(5, v): Maximum traction limit, output in (m/s^2)\numin = v -> -3 / max(5, v): Maximum braking traction limit, output in (m/s^2)\nresistance = DavisResistance(1e-2, 0, 1.5e-5): Resistance function, output in (m/s^2)\nρ = 0: Regeneration coefficient, 0 ≤ ρ < 1; tells how much braking energy can be reused\nvᵢ = 1.0: Initial speed (m/s)\nvf = 1.0: Final speed (m/s)\n\n\n\n\n\n","category":"type"},{"location":"reference/#OptimalTrainControl.calculatecontrol!-Tuple{TrainProblem, Any, Any}","page":"Reference","title":"OptimalTrainControl.calculatecontrol!","text":"calculatecontrol!(prob::TrainProblem, sol, points)\n\nReturn vector of control signal values evaluated at the distances given by sol.t. \n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.finish-Tuple{FlatTrack}","page":"Reference","title":"OptimalTrainControl.finish","text":"finish(t::FlatTrack)\n\nReturn length of the flat track t in metres.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.finish-Tuple{HillyTrack}","page":"Reference","title":"OptimalTrainControl.finish","text":"finish(t::HillyTrack)\n\nReturn length of the track t in metres.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.getgrade-Tuple{HillyTrack, Any}","page":"Reference","title":"OptimalTrainControl.getgrade","text":"getgrade(track::HillyTrack, pos)\n\nGet the track grade (in radians) of the track at the given position pos.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.getgrade-Tuple{Track, Any}","page":"Reference","title":"OptimalTrainControl.getgrade","text":"Get the grade (in radians) of a flat track at the given position.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.getgradientacceleration-Tuple{Track, Any}","page":"Reference","title":"OptimalTrainControl.getgradientacceleration","text":"getgradientacceleration(::Track, position)\n\nReturn acceleration/decelerating component of the gravitational acceleration g = 9.81 m / s^2. Positive means downhill, negative means uphill.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.modecolor-Tuple{Any, Any}","page":"Reference","title":"OptimalTrainControl.modecolor","text":"modecolor(Xs, points)\n\nReturn vector of colors at positions Xs colored according to the control modes defined by points.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.modecolor-Tuple{Any}","page":"Reference","title":"OptimalTrainControl.modecolor","text":"modecolor(mode ∈ ControlModes)\n\nReturn color corresponding to the mode.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.resistance-Tuple{DavisResistance, Any}","page":"Reference","title":"OptimalTrainControl.resistance","text":"resistance(r::DavisResistance, v)\n\nCalculate the Davis formula resistant force per unit mass.\n\nR = r.a + r.b * v + r.c * v^2,\n\nwhere v is the vehicle speed and r.a, v.b and v.c are the resistance parameters.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.solve!-Tuple{TrainProblem}","page":"Reference","title":"OptimalTrainControl.solve!","text":"solve!(prob::TrainProblem; atol = 5)\n\nSolve the optimal train control problem prob with the total journey time satisfied with the absolute tolerance atol. Return value is a tuple of optimal switching points and differential equation solution.\n\nExamples\n\npoints, sol = solve!(prob)\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.start-Tuple{FlatTrack}","page":"Reference","title":"OptimalTrainControl.start","text":"start(t::FlatTrack)\n\nReturn 0 as the beginning of the flat track t.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.start-Tuple{HillyTrack}","page":"Reference","title":"OptimalTrainControl.start","text":"start(t::HillyTrack)\n\nReturn start of the track t in metres.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.subtrack-Tuple{FlatTrack, Any}","page":"Reference","title":"OptimalTrainControl.subtrack","text":"subtrack(full_flattrack::FlatTrack, from)\n\nCreate subtrack of type FlatTrack of full_flattrack from from until finish(full_flattrack).\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.subtrack-Tuple{HillyTrack, Any, Any}","page":"Reference","title":"OptimalTrainControl.subtrack","text":"subtrack(full_track::HillyTrack, from, to)\n\nCreate subtrack of type HillyTrack of full_track spanning from from to to.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OptimalTrainControl.subtrack-Tuple{HillyTrack, Any}","page":"Reference","title":"OptimalTrainControl.subtrack","text":"subtrack(full_track::HillyTrack, from)\n\nCreate subtrack of type HillyTrack of full_track from from until finish(full_track).\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = OptimalTrainControl","category":"page"},{"location":"","page":"Home","title":"Home","text":"<p style=\"text-align:center\">\n\n<img src=\"./assets/logo.svg\" alt=\"OptimalTrainControl logo\">\n\n<br> \n\n<a class=\"github-button\" href=\"https://github.com/vtfanta/OptimalTrainControl.jl\" data-color-scheme=\"no-preference: light; light: light; dark: dark;\" data-icon=\"octicon-star\" data-show-count=\"true\" aria-label=\"Star vtfanta/OptimalTrainControl.jl on GitHub\">Star</a>\n\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n</p> ","category":"page"},{"location":"#OptimalTrainControl.jl-Manual","page":"Home","title":"OptimalTrainControl.jl Manual","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OptimalTrainControl.jl is a package for optimal speed profile calculation for a single train on a given track.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This site serves as the main source of documentation for the package.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Because the package is not registered in its current state, the installation command has the form:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg; Pkg.add(\"https://github.com/vtfanta/OptimalTrainControl.jl\")","category":"page"}]
}
